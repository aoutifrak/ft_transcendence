# Generated by Django 4.2.16 on 2024-11-08 10:13

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import profiles.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=25, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.RegexValidator(message='First name must be at least 2 characters long and contain only letters', regex='^[a-zA-Z]*$')])),
                ('last_name', models.CharField(max_length=25, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.RegexValidator(message='First name must be at least 2 characters long and contain only letters', regex='^[a-zA-Z]*$')])),
                ('username', models.CharField(blank=True, max_length=20, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.RegexValidator(message='username must be at least 2 characters long and contain only letters and numbers and underscores', regex='^(?=.*[a-zA-Z])[a-zA-Z0-9_]*$')])),
                ('email', models.EmailField(max_length=255, unique=True, validators=[django.core.validators.EmailValidator(message='Please enter a valid email address')])),
                ('password', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(8)])),
                ('avatar', models.ImageField(default='avatars/default.png', upload_to='avatars/', validators=[profiles.models.validate_image])),
                ('bio', models.CharField(default='write somthing nice here', max_length=300)),
                ('is_valid', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('pyotp_secret', models.CharField(default='', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_login', models.DateTimeField(auto_now=True, null=True)),
                ('is2fa', models.BooleanField(default=False)),
                ('wins', models.IntegerField(default=0)),
                ('losses', models.IntegerField(default=0)),
                ('draws', models.IntegerField(default=0)),
                ('matches_played', models.IntegerField(default=0)),
                ('is_online', models.BooleanField(default=False)),
                ('blocked', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('friends', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'User',
            },
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.IntegerField(default=0)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='from_user', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='to_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Friend_Request',
                'unique_together': {('from_user', 'to_user')},
            },
        ),
    ]
